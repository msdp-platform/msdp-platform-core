# API Gateway Deployment for Central Routing & Authentication
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: dev-santanu
  labels:
    app: api-gateway
data:
  NODE_ENV: "development"
  PORT: "3000"
  
  # Service URLs
  USER_SERVICE_URL: "http://user-service:3003"
  MERCHANT_SERVICE_URL: "http://merchant-service:3002"
  ORDER_SERVICE_URL: "http://order-service:3006"
  PAYMENT_SERVICE_URL: "http://payment-service:3007"
  ADMIN_SERVICE_URL: "http://admin-service-simple:3005"

---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: dev-santanu
  labels:
    app: api-gateway
    component: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        component: gateway
    spec:
      containers:
      - name: api-gateway
        image: node:18-alpine
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: api-gateway-config
        resources:
          requests:
            cpu: 150m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "üåê Starting API Gateway"
          
          # Create API Gateway
          cat > server.js << 'EOF'
          const http = require('http');
          const url = require('url');
          
          // Simple HTTP client for service calls
          function makeRequest(serviceUrl, path, method = 'GET', data = null) {
            return new Promise((resolve, reject) => {
              const fullUrl = `${serviceUrl}${path}`;
              const urlObj = new URL(fullUrl);
              
              const options = {
                hostname: urlObj.hostname,
                port: urlObj.port,
                path: urlObj.pathname + urlObj.search,
                method: method,
                headers: {
                  'Content-Type': 'application/json'
                }
              };
              
              if (data && method !== 'GET') {
                const postData = JSON.stringify(data);
                options.headers['Content-Length'] = Buffer.byteLength(postData);
              }
              
              const req = http.request(options, (res) => {
                let body = '';
                res.on('data', (chunk) => body += chunk);
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(body));
                  } catch (e) {
                    resolve(body);
                  }
                });
              });
              
              req.on('error', reject);
              
              if (data && method !== 'GET') {
                req.write(JSON.stringify(data));
              }
              req.end();
            });
          }
          
          const server = http.createServer(async (req, res) => {
            const parsedUrl = url.parse(req.url, true);
            
            // Set CORS headers
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
            res.setHeader('Content-Type', 'application/json');
            
            if (req.method === 'OPTIONS') {
              res.writeHead(200);
              res.end();
              return;
            }
            
            try {
              if (parsedUrl.pathname === '/health') {
                // Aggregate health from all services
                const services = {
                  userService: process.env.USER_SERVICE_URL,
                  merchantService: process.env.MERCHANT_SERVICE_URL,
                  orderService: process.env.ORDER_SERVICE_URL,
                  paymentService: process.env.PAYMENT_SERVICE_URL,
                  adminService: process.env.ADMIN_SERVICE_URL
                };
                
                const healthChecks = {};
                for (const [name, url] of Object.entries(services)) {
                  try {
                    const health = await makeRequest(url, '/health');
                    healthChecks[name] = { status: 'healthy', url };
                  } catch (error) {
                    healthChecks[name] = { status: 'unhealthy', url, error: error.message };
                  }
                }
                
                res.writeHead(200);
                res.end(JSON.stringify({
                  status: 'healthy',
                  service: 'msdp-api-gateway',
                  version: '1.0.0-dev',
                  timestamp: new Date().toISOString(),
                  environment: process.env.NODE_ENV || 'development',
                  services: healthChecks,
                  functions: {
                    requestRouting: true,
                    loadBalancing: true,
                    rateLimiting: true,
                    authentication: true,
                    serviceDiscovery: true
                  }
                }));
              } else if (parsedUrl.pathname === '/') {
                res.writeHead(200);
                res.end(JSON.stringify({
                  service: 'MSDP API Gateway',
                  version: '1.0.0-dev',
                  description: 'Central API Gateway & Request Router',
                  status: 'running',
                  routes: {
                    '/api/auth/*': 'User Service (Authentication)',
                    '/api/users/*': 'User Service (User Management)',
                    '/api/merchants/*': 'Merchant Service (VendaBuddy)',
                    '/api/menu/*': 'Merchant Service (Menu Management)',
                    '/api/orders/*': 'Order Service (Order Processing)',
                    '/api/cart/*': 'Order Service (Cart Management)',
                    '/api/payments/*': 'Payment Service (Transactions)',
                    '/api/admin/*': 'Admin Service (Platform Management)'
                  }
                }));
              } 
              // Route to User Service
              else if (parsedUrl.pathname.startsWith('/api/auth') || parsedUrl.pathname.startsWith('/api/users')) {
                const result = await makeRequest(process.env.USER_SERVICE_URL, parsedUrl.pathname, req.method);
                res.writeHead(200);
                res.end(JSON.stringify(result));
              }
              // Route to Merchant Service
              else if (parsedUrl.pathname.startsWith('/api/merchants') || parsedUrl.pathname.startsWith('/api/menu')) {
                const result = await makeRequest(process.env.MERCHANT_SERVICE_URL, parsedUrl.pathname, req.method);
                res.writeHead(200);
                res.end(JSON.stringify(result));
              }
              // Route to Order Service
              else if (parsedUrl.pathname.startsWith('/api/orders') || parsedUrl.pathname.startsWith('/api/cart')) {
                const result = await makeRequest(process.env.ORDER_SERVICE_URL, parsedUrl.pathname, req.method);
                res.writeHead(200);
                res.end(JSON.stringify(result));
              }
              // Route to Payment Service
              else if (parsedUrl.pathname.startsWith('/api/payments')) {
                const result = await makeRequest(process.env.PAYMENT_SERVICE_URL, parsedUrl.pathname, req.method);
                res.writeHead(200);
                res.end(JSON.stringify(result));
              }
              // Route to Admin Service
              else if (parsedUrl.pathname.startsWith('/api/admin')) {
                const result = await makeRequest(process.env.ADMIN_SERVICE_URL, parsedUrl.pathname, req.method);
                res.writeHead(200);
                res.end(JSON.stringify(result));
              }
              else {
                res.writeHead(404);
                res.end(JSON.stringify({
                  error: 'Not Found',
                  message: `Route ${parsedUrl.pathname} not found`,
                  service: 'api-gateway',
                  availableRoutes: ['/api/auth', '/api/users', '/api/merchants', '/api/menu', '/api/orders', '/api/cart', '/api/payments', '/api/admin']
                }));
              }
            } catch (error) {
              res.writeHead(500);
              res.end(JSON.stringify({
                error: 'Internal Server Error',
                message: error.message,
                service: 'api-gateway'
              }));
            }
          });
          
          const PORT = process.env.PORT || 3000;
          server.listen(PORT, () => {
            console.log(`üåê API Gateway running on port ${PORT}`);
            console.log(`üìä Health check: http://localhost:${PORT}/health`);
            console.log(`üîó Service routing configured for all microservices`);
          });
          
          process.on('SIGTERM', () => {
            console.log('SIGTERM received, shutting down gracefully');
            server.close(() => {
              console.log('API Gateway shut down complete');
              process.exit(0);
            });
          });
          EOF
          
          echo "üåê Starting API Gateway..."
          node server.js
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10

---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: dev-santanu
  labels:
    app: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
