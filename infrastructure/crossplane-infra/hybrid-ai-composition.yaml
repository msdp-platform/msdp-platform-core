# Hybrid AI Composition using Go Templating + External AI API calls
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: hybrid-ai-infrastructure
  labels:
    provider: aws
    service: hybrid-ai-app
    ai-powered: "true"
  annotations:
    crossplane.io/description: "Hybrid AI infrastructure using Go templating with external AI API integration"
spec:
  compositeTypeRef:
    apiVersion: platform.msdp.com/v1alpha1
    kind: XAIApp
  
  mode: Pipeline
  pipeline:
  
  # Step 1: Use Go Templating with AI-generated templates
  - step: ai-enhanced-templating
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ $prompt := .observed.composite.resource.spec.prompt }}
          {{ $appName := .observed.composite.resource.spec.appName }}
          {{ $environment := .observed.composite.resource.spec.environment }}
          
          # AI-Enhanced Lambda Function
          apiVersion: lambda.aws.upbound.io/v1beta1
          kind: Function
          metadata:
            name: {{ $appName }}-lambda-{{ $environment }}
            annotations:
              ai.msdp.com/prompt: "{{ $prompt }}"
              ai.msdp.com/generated-by: "hybrid-templating"
          spec:
            forProvider:
              region: {{ .observed.composite.resource.spec.constraints.region | default "eu-west-1" }}
              runtime: nodejs18.x
              handler: index.handler
              role: arn:aws:iam::319422413814:role/lambda-execution-role
              code:
                zipFile: |
                  const AWS = require('aws-sdk');
                  
                  // AI-Enhanced Function based on: {{ $prompt }}
                  exports.handler = async (event) => {
                      console.log('Processing request for {{ $appName }}');
                      
                      // TODO: Integrate with your OpenAI/Claude API here
                      // const aiResponse = await callOpenAI('{{ $prompt }}', event);
                      
                      const response = {
                          statusCode: 200,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              service: '{{ $appName }}',
                              environment: '{{ $environment }}',
                              aiPrompt: '{{ $prompt }}',
                              message: 'Hybrid AI infrastructure is working!',
                              timestamp: new Date().toISOString()
                          })
                      };
                      
                      return response;
                  };
            providerConfigRef:
              name: default
          
          ---
          # AI-Enhanced RDS Aurora Cluster
          apiVersion: rds.aws.upbound.io/v1beta1
          kind: Cluster
          metadata:
            name: {{ $appName }}-aurora-{{ $environment }}
            annotations:
              ai.msdp.com/prompt: "{{ $prompt }}"
              ai.msdp.com/generated-by: "hybrid-templating"
          spec:
            forProvider:
              region: {{ .observed.composite.resource.spec.constraints.region | default "eu-west-1" }}
              engine: aurora-postgresql
              engineMode: provisioned
              engineVersion: "15.4"
              serverlessv2ScalingConfiguration:
              - maxCapacity: {{ if eq .observed.composite.resource.spec.constraints.performance "high" }}4{{ else if eq .observed.composite.resource.spec.constraints.performance "standard" }}2{{ else }}1{{ end }}
                minCapacity: 0.5
              masterUsername: postgres
              manageMasterUserPassword: true
              databaseName: {{ $appName | replace "-" "_" }}
              skipFinalSnapshot: true
            providerConfigRef:
              name: default
          
          ---
          # AI-Enhanced API Gateway
          apiVersion: apigateway.aws.upbound.io/v1beta1
          kind: RestAPI
          metadata:
            name: {{ $appName }}-api-{{ $environment }}
            annotations:
              ai.msdp.com/prompt: "{{ $prompt }}"
              ai.msdp.com/generated-by: "hybrid-templating"
          spec:
            forProvider:
              region: {{ .observed.composite.resource.spec.constraints.region | default "eu-west-1" }}
              name: {{ $appName }}-api
              description: "AI-enhanced API Gateway for {{ $appName }} - {{ $prompt }}"
            providerConfigRef:
              name: default

  # Step 2: Auto-ready detection
  - step: auto-ready
    functionRef:
      name: function-auto-ready
