# AI-Powered Composition using OpenAI and Claude
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: ai-powered-infrastructure
  labels:
    provider: aws
    service: ai-app
    ai-powered: "true"
  annotations:
    crossplane.io/description: "AI-powered infrastructure composition using natural language"
spec:
  compositeTypeRef:
    apiVersion: platform.msdp.com/v1alpha1
    kind: XAIApp
  
  mode: Pipeline
  pipeline:
  
  # Step 1: OpenAI-Powered Resource Generation
  - step: openai-infrastructure-generation
    functionRef:
      name: function-openai
    input:
      apiVersion: openai.fn.upbound.io/v1alpha1
      kind: Prompt
      systemPrompt: |
        You are an expert cloud infrastructure architect specializing in hybrid cloud architectures.
        Your task is to generate production-ready infrastructure based on precise specifications.
        
        MSDP PLATFORM ARCHITECTURE:
        - Frontend: Always deploy to Azure Kubernetes Service (AKS)
        - Backend APIs: Deploy to specified cloud provider (AWS Lambda, Azure Functions)
        - Databases: Deploy to specified cloud provider (AWS RDS, Azure SQL)
        - Networking: Cross-cloud connectivity via VPN/ExpressRoute
        
        IMPORTANT GUIDELINES:
        1. Always create secure, scalable, and cost-effective infrastructure
        2. Follow AWS and Kubernetes best practices
        3. Include proper resource naming, labeling, and tagging
        4. Consider the specified environment, budget, and performance constraints
        5. Generate resources that work together as a cohesive system
        
        AVAILABLE CLOUD RESOURCES:
        
        AWS RESOURCES:
        - Lambda Functions (lambda.aws.upbound.io/v1beta1)
        - RDS Aurora Serverless v2 Clusters (rds.aws.upbound.io/v1beta1)
          * Use engineMode: provisioned with serverlessv2ScalingConfiguration
          * Support auto-pause and scale-to-zero for cost optimization
          * ACU-based scaling (Aurora Capacity Units)
        - API Gateway REST APIs (apigateway.aws.upbound.io/v1beta1)
        - S3 Buckets (s3.aws.upbound.io/v1beta1)
        - EC2 Instances (ec2.aws.upbound.io/v1beta1)
        - EKS Clusters (eks.aws.upbound.io/v1beta1)
        
        AZURE RESOURCES:
        - Azure Functions (web.azure.upbound.io/v1beta1)
        - Azure SQL Databases (sql.azure.upbound.io/v1beta1)
        - Azure Container Apps (containerapp.azure.upbound.io/v1beta1)
        - Azure Storage Accounts (storage.azure.upbound.io/v1beta1)
        - Azure Virtual Machines (compute.azure.upbound.io/v1beta1)
        - Azure Kubernetes Service (containerservice.azure.upbound.io/v1beta1)
        
        KUBERNETES RESOURCES (Cloud-agnostic):
        - Deployments, Services, Ingress, ConfigMaps, Secrets
        
        RESOURCE REQUIREMENTS:
        - All resources must include upbound.io/name annotation
        - Use composite resource name for relationships
        - Include environment-specific configurations
        - Add cost optimization features for non-prod environments
      
      userPrompt: |
        APPLICATION REQUEST:
        {{ .observed.composite.resource.spec.prompt }}
        
        APPLICATION DETAILS:
        - Name: {{ .observed.composite.resource.spec.appName }}
        - Environment: {{ .observed.composite.resource.spec.environment }}
        - Cloud Provider: {{ .observed.composite.resource.spec.cloudProvider }}
        - Region: {{ .observed.composite.resource.spec.constraints.region }}
        - Budget: {{ .observed.composite.resource.spec.constraints.budget }}
        - Performance: {{ .observed.composite.resource.spec.constraints.performance }}
        - Security: {{ .observed.composite.resource.spec.constraints.security }}
        
        INSTRUCTIONS:
        Based on the application request above, generate the complete infrastructure needed.
        Consider the environment and constraints when sizing and configuring resources.
        
        For {{ .observed.composite.resource.spec.environment }} environment:
        {{- if eq .observed.composite.resource.spec.environment "dev" }}
        - Use smaller instance sizes and minimal redundancy
        - Enable cost optimization features
        - Include development-friendly configurations
        {{- else if eq .observed.composite.resource.spec.environment "staging" }}
        - Use production-like sizing but with cost optimizations
        - Include monitoring and testing capabilities
        {{- else if eq .observed.composite.resource.spec.environment "prod" }}
        - Use production-grade sizing and full redundancy
        - Enable all security and monitoring features
        - Include backup and disaster recovery
        {{- end }}
        
        CLOUD PROVIDER INSTRUCTIONS:
        {{- if eq .observed.composite.resource.spec.cloudProvider "aws" }}
        - Use AWS resources (lambda.aws.upbound.io, rds.aws.upbound.io, etc.)
        - Follow AWS best practices and naming conventions
        - For databases, use Aurora Serverless v2 with these specifications:
          * engineMode: provisioned (required for Serverless v2)
          * serverlessv2ScalingConfiguration with minCapacity and maxCapacity
          * manageMasterUserPassword: true (use AWS Secrets Manager)
          * Enable auto-pause for dev environments only
          * Use ACU (Aurora Capacity Units) for scaling
        {{- else if eq .observed.composite.resource.spec.cloudProvider "azure" }}
        - Use Azure resources (web.azure.upbound.io, sql.azure.upbound.io, etc.)
        - Follow Azure best practices and naming conventions  
        - Use Azure-specific features like Container Apps, Azure SQL
        {{- else if eq .observed.composite.resource.spec.cloudProvider "multi-cloud" }}
        - Use a mix of AWS and Azure resources for redundancy
        - Ensure cross-cloud compatibility and data synchronization
        - Consider network connectivity between clouds
        {{- end }}
        
        Generate all necessary cloud and Kubernetes resources to fulfill this request.
        
      credentials:
      - name: openai
        source: Secret
        secretRef:
          namespace: crossplane-system
          name: openai-secret
          key: api-key

  # Step 2: Claude-Powered Optimization and Validation
  - step: claude-optimization-validation
    functionRef:
      name: function-claude
    input:
      apiVersion: claude.fn.upbound.io/v1alpha1
      kind: Prompt
      systemPrompt: |
        You are a senior cloud architect and security expert specializing in infrastructure optimization.
        Your role is to review, optimize, and enhance infrastructure generated by other AI systems.
        
        OPTIMIZATION FOCUS AREAS:
        1. Security hardening and compliance
        2. Cost optimization and resource efficiency
        3. Performance tuning and scalability
        4. Operational excellence and monitoring
        5. Disaster recovery and backup strategies
        
        VALIDATION CHECKLIST:
        - All resources have proper security configurations
        - Network security groups and policies are restrictive
        - Encryption is enabled where applicable
        - Resource sizing matches performance requirements
        - Proper tagging and labeling for cost tracking
        - Monitoring and alerting capabilities
        
        You will receive infrastructure resources and should optimize them while maintaining functionality.
      
      userPrompt: |
        <instructions>
        Review and optimize the infrastructure resources generated for this application:
        
        APPLICATION: {{ .observed.composite.resource.spec.appName }}
        ENVIRONMENT: {{ .observed.composite.resource.spec.environment }}
        REQUIREMENTS: {{ .observed.composite.resource.spec.prompt }}
        
        CONSTRAINTS:
        - Budget: {{ .observed.composite.resource.spec.constraints.budget }}
        - Performance: {{ .observed.composite.resource.spec.constraints.performance }}
        - Security: {{ .observed.composite.resource.spec.constraints.security }}
        
        EXISTING RESOURCES:
        {{ .composed }}
        
        OPTIMIZATION TASKS:
        1. Review all resources for security best practices
        2. Optimize for the specified budget level
        3. Ensure performance requirements are met
        4. Add monitoring and observability features
        5. Include backup and recovery mechanisms where needed
        6. Validate resource relationships and dependencies
        
        Provide the optimized infrastructure resources, maintaining all existing upbound.io/name annotations.
        Add security enhancements, monitoring, and cost optimizations as appropriate.
        </instructions>
        
      credentials:
      - name: claude
        source: Secret
        secretRef:
          namespace: crossplane-system
          name: claude-secret
          key: api-key

  # Step 3: Auto-Ready Detection
  - step: auto-ready-detection
    functionRef:
      name: function-auto-ready
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
