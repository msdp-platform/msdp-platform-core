# Tier 1: Frontend Application on AKS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service-frontend
  namespace: user-service
  labels:
    app: user-service-frontend
    tier: frontend
    service: user-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service-frontend
  template:
    metadata:
      labels:
        app: user-service-frontend
        tier: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: frontend-config
          mountPath: /usr/share/nginx/html
        env:
        - name: API_LAMBDA_URL
          value: "https://api.dev.aztech-msdp.com"
        - name: TIER_ARCHITECTURE
          value: "3-tier-crossplane"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: frontend-config
        configMap:
          name: user-service-frontend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-frontend
  namespace: user-service
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>MSDP 3-Tier Architecture - Clean Deployment</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
                padding: 20px;
            }
            .container { 
                max-width: 1200px;
                margin: 0 auto;
                background: rgba(255,255,255,0.1); 
                padding: 30px; 
                border-radius: 20px;
                backdrop-filter: blur(15px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }
            h1 { 
                text-align: center; 
                margin-bottom: 30px; 
                font-size: 2.5em;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            }
            .architecture { 
                display: grid; 
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px; 
                margin: 30px 0;
            }
            .tier { 
                background: rgba(255,255,255,0.2); 
                padding: 25px; 
                border-radius: 15px;
                text-align: center;
                border: 2px solid rgba(255,255,255,0.3);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            .tier:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 24px rgba(0,0,0,0.2);
            }
            .tier h3 { 
                font-size: 1.5em; 
                margin-bottom: 15px; 
                color: #FFD700;
            }
            .tier p { 
                margin: 8px 0; 
                opacity: 0.9;
            }
            .status { 
                display: inline-block; 
                padding: 5px 12px; 
                border-radius: 20px; 
                font-size: 0.9em;
                font-weight: bold;
                margin: 5px;
            }
            .status.live { background: #4CAF50; }
            .status.deploying { background: #FF9800; }
            .status.pending { background: #9E9E9E; }
            .controls { 
                background: rgba(255,255,255,0.15); 
                padding: 25px; 
                border-radius: 15px;
                margin: 20px 0;
            }
            button { 
                background: linear-gradient(45deg, #4CAF50, #45a049);
                color: white; 
                border: none; 
                padding: 12px 24px; 
                border-radius: 8px; 
                cursor: pointer;
                margin: 8px;
                font-size: 1em;
                font-weight: bold;
                transition: all 0.3s ease;
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }
            button:hover { 
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.3);
            }
            .response { 
                background: rgba(0,0,0,0.4); 
                padding: 20px; 
                margin: 15px 0; 
                border-radius: 10px;
                font-family: 'Courier New', monospace;
                white-space: pre-wrap;
                border-left: 4px solid #4CAF50;
                max-height: 400px;
                overflow-y: auto;
            }
            .deployment-info {
                background: rgba(255,255,255,0.1);
                padding: 20px;
                border-radius: 15px;
                margin: 20px 0;
            }
            .deployment-info h3 {
                color: #FFD700;
                margin-bottom: 15px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üèóÔ∏è MSDP 3-Tier Architecture</h1>
            <div class="deployment-info">
                <h3>üöÄ Clean Deployment Status</h3>
                <p><strong>Deployment Type:</strong> Clean GitOps with ArgoCD + Crossplane</p>
                <p><strong>Architecture:</strong> 3-Tier (Frontend ‚Üí API Gateway ‚Üí Database)</p>
                <p><strong>Infrastructure:</strong> AKS + AWS Lambda + Aurora PostgreSQL</p>
                <p><strong>Management:</strong> Crossplane v2.0.2 Direct Resources</p>
            </div>
            
            <div class="architecture">
                <div class="tier">
                    <h3>üé® Tier 1: Frontend</h3>
                    <p><strong>Platform:</strong> Azure AKS</p>
                    <p><strong>Technology:</strong> React/HTML + Nginx</p>
                    <p><strong>Deployment:</strong> Kubernetes Pods</p>
                    <p><strong>Ingress:</strong> HTTPS with SSL</p>
                    <span class="status live">‚úÖ LIVE</span>
                </div>
                <div class="tier">
                    <h3>‚ö° Tier 2: API Logic</h3>
                    <p><strong>Platform:</strong> AWS Lambda</p>
                    <p><strong>Technology:</strong> Node.js 18.x</p>
                    <p><strong>Deployment:</strong> Serverless Functions</p>
                    <p><strong>Management:</strong> Crossplane Direct</p>
                    <span class="status live">‚úÖ READY</span>
                </div>
                <div class="tier">
                    <h3>üóÑÔ∏è Tier 3: Database</h3>
                    <p><strong>Platform:</strong> AWS Aurora</p>
                    <p><strong>Technology:</strong> PostgreSQL 15.4</p>
                    <p><strong>Deployment:</strong> Managed Cluster</p>
                    <p><strong>Features:</strong> HA + Encryption</p>
                    <span class="status live">‚úÖ READY</span>
                </div>
            </div>

            <div class="controls">
                <h3>üß™ API Testing</h3>
                <button onclick="getUsers()">üë• Get All Users</button>
                <button onclick="createUser()">‚ûï Create User</button>
                <button onclick="checkHealth()">‚ù§Ô∏è Health Check</button>
                <button onclick="getArchitecture()">üèóÔ∏è Architecture Info</button>
                <div id="response" class="response">Click a button to test the API...</div>
            </div>

            <div class="deployment-info">
                <h3>üìä Deployment Details</h3>
                <p><strong>Frontend URL:</strong> https://user-service.dev.aztech-msdp.com</p>
                <p><strong>API Gateway:</strong> geqabb3ybb.execute-api.eu-west-1.amazonaws.com ‚úÖ READY</p>
                <p><strong>Lambda Function:</strong> user-service-lambda-production ‚úÖ READY</p>
                <p><strong>Database:</strong> user-service-aurora-serverless ‚úÖ READY</p>
                <p><strong>S3 Bucket:</strong> lambda-code-bucket-msdp-2025-09-24-21-33 ‚úÖ READY</p>
                <p><strong>ArgoCD:</strong> Monitoring GitOps deployment</p>
                <p><strong>Crossplane:</strong> Managing AWS resources</p>
            </div>
        </div>

        <script>
            const API_BASE = 'https://geqabb3ybb.execute-api.eu-west-1.amazonaws.com/prod';
            
            async function apiCall(endpoint, method = 'GET', body = null) {
                const response = document.getElementById('response');
                response.textContent = 'Loading...';
                
                try {
                    const options = {
                        method,
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    };
                    
                    if (body) {
                        options.body = JSON.stringify(body);
                    }
                    
                    const res = await fetch(`${API_BASE}${endpoint}`, options);
                    const data = await res.json();
                    
                    response.textContent = JSON.stringify(data, null, 2);
                } catch (error) {
                    response.textContent = `Error: ${error.message}\n\nNote: Lambda function may still be deploying...`;
                }
            }
            
            function getUsers() {
                apiCall('/users');
            }
            
            function createUser() {
                const userData = {
                    name: 'New User ' + Date.now(),
                    email: `user${Date.now()}@msdp.com`,
                    department: 'Engineering'
                };
                apiCall('/users', 'POST', userData);
            }
            
            function checkHealth() {
                apiCall('/health');
            }
            
            function getArchitecture() {
                apiCall('/architecture');
            }
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: user-service-frontend
  namespace: user-service
  labels:
    app: user-service-frontend
    tier: frontend
spec:
  selector:
    app: user-service-frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-service-frontend
  namespace: user-service
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels:
    tier: frontend
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - user-service.dev.aztech-msdp.com
    secretName: user-service-tls
  rules:
  - host: user-service.dev.aztech-msdp.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: user-service-frontend
            port:
              number: 80
