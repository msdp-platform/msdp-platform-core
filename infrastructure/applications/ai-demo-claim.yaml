# AI-Powered 3-Tier User Service Infrastructure
apiVersion: platform.msdp.com/v1alpha1
kind: AIApp
metadata:
  name: user-service-3tier
  namespace: user-service
  labels:
    app: user-service
    tier: 3tier-architecture
    ai-powered: "true"
    msdp.platform/service: user-service
  annotations:
    ai.crossplane.io/architecture: "3-tier"
    ai.crossplane.io/description: "AI-powered 3-tier user service infrastructure"
spec:
  # Precise Infrastructure Specification
  prompt: |
    Create a production-ready 3-tier user service architecture with these EXACT specifications:
    
    TIER 1 - FRONTEND (Kubernetes on AKS):
    - Deployment: user-service-frontend
    - Replicas: 2 (dev), 3 (staging), 5 (prod)
    - Container: nginx serving React build
    - Service: user-service-frontend (ClusterIP, port 80)
    - Ingress: user-service-frontend.dev.aztech-msdp.com
    - SSL: Let's Encrypt certificate via cert-manager
    
    TIER 2 - API LAYER (AWS Lambda):
    - Function Name: user-service-lambda-{environment}
    - Runtime: nodejs18.x
    - Memory: 256MB (dev), 512MB (staging), 1024MB (prod)
    - Timeout: 30s (dev), 60s (staging/prod)
    - Environment Variables:
      * NODE_ENV: {environment}
      * DB_HOST: {rds-endpoint}
      * REDIS_URL: {redis-endpoint}
    - IAM Role: user-service-lambda-execution-role
    - VPC: Deploy in private subnets with NAT Gateway access
    
    TIER 3 - DATABASE (AWS RDS Aurora Serverless v2):
    - Cluster Name: user-service-aurora-{environment}
    - Engine: aurora-postgresql
    - Engine Mode: provisioned (required for Serverless v2)
    - Engine Version: 15.4
    - Serverless v2 Scaling Configuration:
      * Min Capacity: 0.5 ACU (dev), 0.5 ACU (staging), 1 ACU (prod)
      * Max Capacity: 2 ACU (dev), 4 ACU (staging), 16 ACU (prod)
      * Auto Pause: true (dev only, after 5 minutes)
      * Scale to Zero: true (dev only)
    - Database Name: userservice
    - Master Username: postgres
    - Manage Master User Password: true (AWS Secrets Manager)
    - Backup Retention: 7 days (dev), 14 days (staging), 30 days (prod)
    - Storage Encryption: true (AES-256)
    - Multi-AZ: false (dev), true (staging/prod)
    - Performance Insights: enabled
    - Monitoring Interval: 60 seconds
    - Skip Final Snapshot: true (dev only)
    
    API GATEWAY (AWS):
    - Name: user-service-api-{environment}
    - Type: REST API
    - Stage: {environment}
    - Custom Domain: api-user-service.dev.aztech-msdp.com
    - SSL Certificate: ACM certificate
    - Integration: Lambda Proxy Integration
    - CORS: Enabled for frontend domain
    - Rate Limiting: 1000 req/min (dev), 5000 req/min (staging/prod)
    
    NAMING CONVENTIONS:
    - All AWS resources: user-service-{resource-type}-{environment}
    - All K8s resources: user-service-{component}
    - Tags: Environment={environment}, Service=user-service, ManagedBy=crossplane-ai
    - Labels: app=user-service, tier={tier-number}, environment={environment}
    
    SECURITY REQUIREMENTS:
    - RDS: Private subnets only, security group allowing Lambda access
    - Lambda: VPC deployment, security group for RDS access
    - API Gateway: API key required, throttling enabled
    - Frontend: HTTPS only, security headers
    
    MONITORING:
    - CloudWatch Logs: All Lambda functions
    - CloudWatch Metrics: Custom metrics for API performance
    - RDS Performance Insights: Enabled
    - Application Load Balancer: Access logs to S3
  
  # Application Configuration
  appName: user-service
  environment: dev
  aiProvider: openai  # Use OpenAI for precise infrastructure generation
  cloudProvider: aws  # AWS for backend, AKS for frontend
  
  # Technical Constraints
  constraints:
    region: eu-west-1
    budget: medium
    performance: standard
    security: enhanced
  
  # Composition Reference
  compositionRef:
    name: ai-powered-infrastructure
  
  # Connection Secrets
  writeConnectionSecretsToNamespace: user-service
